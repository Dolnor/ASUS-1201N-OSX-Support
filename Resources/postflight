#!/bin/bash

sle="${3}/System/Library/Extensions"
osver=`sw_vers -productVersion`
rc="/etc/rc.shutdown.d"

# install codec commander based on system version
if [ ${osver} == '10.7' -o ${osver} == '10.8' -o ${osver%??} == '10.7' -o ${osver%??} == '10.8' ]
then
	cp -Rf "${3}/tmp/kext/cc/7-8/CodecCommander.kext" "${sle}"
fi

if [ ${osver} == '10.9' -o ${osver} == '10.10' -o ${osver%??} == '10.9' -o ${osver%??} == '10.10' ]
then
	cp -Rf "${3}/tmp/kext/cc/9-10/CodecCommander.kext" "${sle}"
fi

# rebilding kernelcache
touch "${sle}"

## generate serail numbers
efi=$( df | grep EFI | sed -nE 's/.*% +([-A-F0-9]+)*/\1/p' )
config="${efi}/EFI/CLOVER/config.plist"
backup="${3}/tmp/temp.plist"

    if [ -e $backup ]
    then
        serial=$( /usr/libexec/PlistBuddy -c "Print SMBIOS:SerialNumber" ${backup} )
        boardserial=$( /usr/libexec/PlistBuddy -c "Print SMBIOS:BoardSerialNumber" ${backup} )
    else
        week=CDFGHJKLMNPQRTVWXY12345678
        chars=ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890
        week_letters=`echo ${week:$(($RANDOM%${#week})):2}`
        function random_char { echo ${chars:$(($RANDOM%${#chars})):1}; }
        serial="W89"$week_letters$(random_char)$(random_char)$(random_char)"9A7"
        boardserial="W89"$week_letters$(random_char)$(random_char)$(random_char)$(random_char)$(random_char)$(random_char)$(random_char)$(random_char)$(random_char)"9A7"
    fi

/usr/libexec/PlistBuddy -c "Set SMBIOS:SerialNumber $serial" ${config}
/usr/libexec/PlistBuddy -c "Set SMBIOS:BoardSerialNumber $boardserial" ${config}
/usr/libexec/PlistBuddy -c "Set RtVariables:MLB $boardserial" ${config}

## compile and copy ACPI tables to ESP
if [ -d "${3}/tmp/ACPI" ];
then
    ${3}/tmp/ACPI/iasl ${3}/tmp/ACPI/*.dsl

    acpi="${efi}/EFI/CLOVER/ACPI/patched/"
    cp "${3}/tmp/ACPI/DSDT.aml"     "${acpi}"
    cp "${3}/tmp/ACPI/SSDT-1.aml"   "${acpi}"
    cp "${3}/tmp/ACPI/SSDT-2.aml"   "${acpi}"
    cp "${3}/tmp/ACPI/SSDT-3.aml"   "${acpi}"
    cp "${3}/tmp/ACPI/SSDT-4.aml"   "${acpi}"
    cp "${3}/tmp/ACPI/SSDT-5.aml"   "${acpi}"
fi

## unmount EFI System partition
efi_disk=$( df / | sed -n '2p' | awk '{print $1}' )
efi_mp="/Volumes/EFI"

	if [ "$efi_mp" = "$efi" ]
	then
			sudo umount $efi_mp
    fi
    
    if [ "$efi_mp" = "$efi" ]
	then
			diskutil umount $efi_mp
    fi

# set up logout hook for nvram saving in yosemite
if [ ${osver} == '10.10' -o ${osver%??} == '10.10' ]
then
    if [ -d "$rc" ];
    then
        chmod +x "${rc}"/80.save_nvram_plist.local
        defaults write com.apple.loginwindow LogoutHook "${rc}"/80.save_nvram_plist.local
    fi
fi

## delete temp files used during installation
rm -R "${3}/tmp/EFI"
rm -R "${3}/tmp/ACPI"
rm -R "${3}/tmp/App"
rm -R "${3}/tmp/kext"

## delete temp plist
if [ -e $backup ]
then
    rm ${backup}
fi

exit 0
